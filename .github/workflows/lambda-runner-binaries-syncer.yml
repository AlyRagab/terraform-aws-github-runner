name: Lambda Runner Binaries Syncer
env:
  lambda_name: runner-binaries-syncer
  lambda_path: modules/runner-binaries-syncer/lambdas/runner-binaries-syncer
on:
  push:
    branches:
      - master
  pull_request:
    # paths:
    # - .github/workflows/runner-binaries-syncer.yml
    # - "modules/runner-binaries-syncer/lambdas/runner-binaries-syncer/**"

jobs:
  build:
    runs-on: ubuntu-latest
    container: node:12
    defaults:
      run:
        working-directory: modules/runner-binaries-syncer/lambdas/runner-binaries-syncer
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: yarn install
      - name: Run linter
        run: yarn lint
      - name: Build distribution
        run: yarn build
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Upload distribution
        # if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ${{ env.lambda_path }}/dist

  release_draft:
    name: Create Draft Release
    needs: build
    runs-on: ubuntu-latest
    container: node:12
    # if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2
      - name: Extract tag name
        id: tag_name
        run: echo ::set-output name=TAG::${GITHUB_REF##*/}
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Create zip
        run: |
          ls -la 
          apt update && apt install zip
          cd dist
          ls -la 
          zip -r ../${lambda_name}.zip .
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@latest
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: true
      #     prerelease: true
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./webhook.zip
      #     asset_name: parser-${{ steps.tag_name.outputs.TAG }}.zip
      #     asset_content_type: application/zip
